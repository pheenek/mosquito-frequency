#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.4
#  in conjunction with Tcl version 8.6
#    Jul 31, 2020 10:09:13 AM EAT  platform: Linux

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import plotter_gui_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    plotter_gui_support.set_Tk_var()
    top = Plotter_GUI (root)
    plotter_gui_support.init(root, top)
    root.mainloop()

w = None
def create_Plotter_GUI(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Plotter_GUI(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    plotter_gui_support.set_Tk_var()
    top = Plotter_GUI (w)
    plotter_gui_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Plotter_GUI():
    global w
    w.destroy()
    w = None

class Plotter_GUI:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font9 = "-family {DejaVu Sans} -size 12 -weight bold"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("709x456+650+150")
        top.minsize(1, 1)
        top.maxsize(1905, 1050)
        top.resizable(1, 1)
        top.title("Frequency Monitor")
        top.configure(highlightcolor="blue")
        top.configure(background='#d9d9d9')

        self.PortFrame = ttk.Frame(top)
        self.PortFrame.place(relx=0.028, rely=0.112, relheight=0.632
                , relwidth=0.279)
        self.PortFrame.configure(relief='groove')
        self.PortFrame.configure(borderwidth="2")
        self.PortFrame.configure(relief="groove")

        self.PortLabel = ttk.Label(self.PortFrame)
        self.PortLabel.place(relx=0.101, rely=0.212, height=23, width=65)
        self.PortLabel.configure(background="#d9d9d9")
        self.PortLabel.configure(foreground="#000000")
        self.PortLabel.configure(font="TkDefaultFont")
        self.PortLabel.configure(relief="flat")
        self.PortLabel.configure(anchor='w')
        self.PortLabel.configure(justify='left')
        self.PortLabel.configure(text='''Port''')

        self.PortComboBox = ttk.Combobox(self.PortFrame)
        self.PortComboBox.place(relx=0.101, rely=0.316, relheight=0.073
                , relwidth=0.803)
        self.PortComboBox.configure(textvariable=plotter_gui_support.combobox)
        self.PortComboBox.configure(takefocus="")

        self.RefreshPortButton = ttk.Button(self.PortFrame)
        self.RefreshPortButton.place(relx=0.101, rely=0.42, height=26, width=73)
        self.RefreshPortButton.configure(takefocus="")
        self.RefreshPortButton.configure(text='''Refresh''')

        self.ConnectPortButton = ttk.Button(self.PortFrame)
        self.ConnectPortButton.place(relx=0.505, rely=0.42, height=26, width=83)
        self.ConnectPortButton.configure(takefocus="")
        self.ConnectPortButton.configure(text='''Connect''')

        self.SettingsLabelFrame = ttk.Labelframe(top)
        self.SettingsLabelFrame.place(relx=0.324, rely=0.09, relheight=0.5
                , relwidth=0.635)
        self.SettingsLabelFrame.configure(relief='')
        self.SettingsLabelFrame.configure(text='''Settings''')

        self.IntervalLabel = ttk.Label(self.SettingsLabelFrame)
        self.IntervalLabel.place(relx=0.044, rely=0.268, height=34, width=139
                , bordermode='ignore')
        self.IntervalLabel.configure(background="#d9d9d9")
        self.IntervalLabel.configure(foreground="#000000")
        self.IntervalLabel.configure(font="TkDefaultFont")
        self.IntervalLabel.configure(relief="flat")
        self.IntervalLabel.configure(anchor='w')
        self.IntervalLabel.configure(justify='left')
        self.IntervalLabel.configure(text='''Sampling Interval''')

        self.SamplesLabel = ttk.Label(self.SettingsLabelFrame)
        self.SamplesLabel.place(relx=0.044, rely=0.487, height=34, width=172
                , bordermode='ignore')
        self.SamplesLabel.configure(background="#d9d9d9")
        self.SamplesLabel.configure(foreground="#000000")
        self.SamplesLabel.configure(font="TkDefaultFont")
        self.SamplesLabel.configure(relief="flat")
        self.SamplesLabel.configure(anchor='w')
        self.SamplesLabel.configure(justify='left')
        self.SamplesLabel.configure(text='''Samples per Recording''')

        self.CycleLabel = ttk.Label(self.SettingsLabelFrame)
        self.CycleLabel.place(relx=0.044, rely=0.711, height=35, width=117
                , bordermode='ignore')
        self.CycleLabel.configure(background="#d9d9d9")
        self.CycleLabel.configure(foreground="#000000")
        self.CycleLabel.configure(font="TkDefaultFont")
        self.CycleLabel.configure(relief="flat")
        self.CycleLabel.configure(anchor='w')
        self.CycleLabel.configure(justify='left')
        self.CycleLabel.configure(text='''Cycle Time''')

        self.IntervalComboBox = ttk.Combobox(self.SettingsLabelFrame)
        self.IntervalComboBox.place(relx=0.444, rely=0.263, relheight=0.11
                , relwidth=0.393, bordermode='ignore')
        self.IntervalComboBox.configure(textvariable=plotter_gui_support.combobox)
        self.IntervalComboBox.configure(takefocus="")

        self.IntervalUnitsLabel = ttk.Label(self.SettingsLabelFrame)
        self.IntervalUnitsLabel.place(relx=0.867, rely=0.263, height=24, width=37
                , bordermode='ignore')
        self.IntervalUnitsLabel.configure(background="#d9d9d9")
        self.IntervalUnitsLabel.configure(foreground="#000000")
        self.IntervalUnitsLabel.configure(font="TkDefaultFont")
        self.IntervalUnitsLabel.configure(relief="flat")
        self.IntervalUnitsLabel.configure(anchor='w')
        self.IntervalUnitsLabel.configure(justify='left')
        self.IntervalUnitsLabel.configure(text='''s''')

        self.NoSamplesText = ttk.Entry(self.SettingsLabelFrame)
        self.NoSamplesText.place(relx=0.444, rely=0.482, relheight=0.11
                , relwidth=0.387, bordermode='ignore')
        self.NoSamplesText.configure(takefocus="")
        self.NoSamplesText.configure(cursor="xterm")

        self.SamplesUnitsLabel = ttk.Label(self.SettingsLabelFrame)
        self.SamplesUnitsLabel.place(relx=0.867, rely=0.482, height=23, width=51
                , bordermode='ignore')
        self.SamplesUnitsLabel.configure(background="#d9d9d9")
        self.SamplesUnitsLabel.configure(foreground="#000000")
        self.SamplesUnitsLabel.configure(font="TkDefaultFont")
        self.SamplesUnitsLabel.configure(relief="flat")
        self.SamplesUnitsLabel.configure(anchor='w')
        self.SamplesUnitsLabel.configure(justify='left')
        self.SamplesUnitsLabel.configure(text='''samples''')

        self.NoHoursCycleText = ttk.Entry(self.SettingsLabelFrame)
        self.NoHoursCycleText.place(relx=0.4, rely=0.711, relheight=0.083
                , relwidth=0.098, bordermode='ignore')
        self.NoHoursCycleText.configure(takefocus="")
        self.NoHoursCycleText.configure(cursor="xterm")

        self.CycleHoursLabel = ttk.Label(self.SettingsLabelFrame)
        self.CycleHoursLabel.place(relx=0.511, rely=0.711, height=14, width=46
                , bordermode='ignore')
        self.CycleHoursLabel.configure(background="#d9d9d9")
        self.CycleHoursLabel.configure(foreground="#000000")
        self.CycleHoursLabel.configure(font="TkDefaultFont")
        self.CycleHoursLabel.configure(relief="flat")
        self.CycleHoursLabel.configure(anchor='w')
        self.CycleHoursLabel.configure(justify='left')
        self.CycleHoursLabel.configure(text='''Hours''')

        self.NoMinutesCycleText = ttk.Entry(self.SettingsLabelFrame)
        self.NoMinutesCycleText.place(relx=0.622, rely=0.711, relheight=0.083
                , relwidth=0.098, bordermode='ignore')
        self.NoMinutesCycleText.configure(takefocus="")
        self.NoMinutesCycleText.configure(cursor="xterm")

        self.CycleMinutesLabel = ttk.Label(self.SettingsLabelFrame)
        self.CycleMinutesLabel.place(relx=0.756, rely=0.711, height=14, width=49
                , bordermode='ignore')
        self.CycleMinutesLabel.configure(background="#d9d9d9")
        self.CycleMinutesLabel.configure(foreground="#000000")
        self.CycleMinutesLabel.configure(font="TkDefaultFont")
        self.CycleMinutesLabel.configure(relief="flat")
        self.CycleMinutesLabel.configure(anchor='w')
        self.CycleMinutesLabel.configure(justify='left')
        self.CycleMinutesLabel.configure(text='''Minutes''')

        self.OutputLabelFrame = ttk.Labelframe(top)
        self.OutputLabelFrame.place(relx=0.324, rely=0.601, relheight=0.143
                , relwidth=0.635)
        self.OutputLabelFrame.configure(relief='')
        self.OutputLabelFrame.configure(text='''Output''')

        self.OutputFileLabel = ttk.Label(self.OutputLabelFrame)
        self.OutputFileLabel.place(relx=0.133, rely=0.308, height=30, width=99
                , bordermode='ignore')
        self.OutputFileLabel.configure(background="#d9d9d9")
        self.OutputFileLabel.configure(foreground="#000000")
        self.OutputFileLabel.configure(font="TkDefaultFont")
        self.OutputFileLabel.configure(relief="flat")
        self.OutputFileLabel.configure(anchor='w')
        self.OutputFileLabel.configure(justify='left')
        self.OutputFileLabel.configure(text='''Output File''')

        self.OutFileText = ttk.Entry(self.OutputLabelFrame)
        self.OutFileText.place(relx=0.4, rely=0.308, relheight=0.338
                , relwidth=0.364, bordermode='ignore')
        self.OutFileText.configure(takefocus="")
        self.OutFileText.configure(cursor="xterm")

        self.OpenFileButton = ttk.Button(self.OutputLabelFrame)
        self.OpenFileButton.place(relx=0.778, rely=0.308, height=26, width=83
                , bordermode='ignore')
        self.OpenFileButton.configure(takefocus="")
        self.OpenFileButton.configure(text='''Open''')

        self.RecordDataButton = ttk.Button(top)
        self.RecordDataButton.place(relx=0.324, rely=0.8, height=26, width=223)
        self.RecordDataButton.configure(takefocus="")
        self.RecordDataButton.configure(text='''Start Recording''')

        self.StatusLabel = ttk.Label(top)
        self.StatusLabel.place(relx=0.014, rely=0.899, height=37, width=687)
        self.StatusLabel.configure(background="#FF0000")
        self.StatusLabel.configure(foreground="#FFFFFF")
        self.StatusLabel.configure(font=font9)
        self.StatusLabel.configure(relief="flat")
        self.StatusLabel.configure(anchor='center')
        self.StatusLabel.configure(justify='left')
        self.StatusLabel.configure(text='''Disconnected''')
        self.StatusLabel.configure(compound='center')

if __name__ == '__main__':
    vp_start_gui()





