#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.4
#  in conjunction with Tcl version 8.6
#    Jul 31, 2020 10:55:31 AM EAT  platform: Linux

import sys, os, subprocess
import tkinter as tk
from tkinter import messagebox, filedialog
import tkinter.ttk as ttk
import plotter_gui_support
import serial
import serial.tools.list_ports as serial_tools
import numpy as np
import animate_plot
import ntpath
import tk_plot

def confirm_quit():
    if messagebox.askokcancel("Quit?", "Are you sure you want to quit?"):
        if (plotter_gui_support.port != None):
            plotter_gui_support.port.close()
            print("Port status:", plotter_gui_support.port.isOpen())
        root.destroy()

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    root.protocol("WM_DELETE_WINDOW", confirm_quit)
    plotter_gui_support.set_Tk_var()
    top = Plotter_GUI(root)
    plotter_gui_support.init(root, top)
    root.mainloop()


w = None


def create_Plotter_GUI(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Plotter_GUI(root, *args, **kwargs)' .'''
    global w, w_win, root
    # rt = root
    root = rt
    w = tk.Toplevel(root)
    plotter_gui_support.set_Tk_var()
    top = Plotter_GUI(w)
    plotter_gui_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_Plotter_GUI():
    global w
    w.destroy()
    w = None


interval_vals = []
for i in np.arange(0.5, 10.5, 0.5):
    interval_vals.append(i)


class Plotter_GUI:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=[
            ('selected', _compcolor), ('active', _ana2color)])

        top.geometry("709x456+650+150")
        top.minsize(1, 1)
        top.maxsize(1905, 1050)
        top.resizable(1, 1)
        top.title("Frequency Monitor")
        top.configure(highlightcolor="black")
        top.configure(background='#d9d9d9')

        self.PortFrame = ttk.Frame(top)
        self.PortFrame.place(relx=0.028, rely=0.112,
                             relheight=0.478, relwidth=0.279)
        self.PortFrame.configure(relief='groove')
        self.PortFrame.configure(borderwidth="2")
        self.PortFrame.configure(relief="groove")

        self.PortLabel = ttk.Label(self.PortFrame)
        self.PortLabel.place(relx=0.101, rely=0.182, height=23, width=65)
        self.PortLabel.configure(background="#d9d9d9")
        self.PortLabel.configure(foreground="#000000")
        self.PortLabel.configure(font="TkDefaultFont")
        self.PortLabel.configure(relief="flat")
        self.PortLabel.configure(anchor='w')
        self.PortLabel.configure(justify='left')
        self.PortLabel.configure(text='''Port''')

        port_list = self.get_ports()
        self.PortComboBox = ttk.Combobox(
            self.PortFrame, values=port_list)
        if (len(port_list) > 0):
            ret = self.PortComboBox.current(0)
            print("Port ret:", ret, "ports:", port_list)
        self.PortComboBox.place(relx=0.101, rely=0.286,
                                relheight=0.093, relwidth=0.803)
        self.PortComboBox.configure(
            textvariable=plotter_gui_support.port_combobox)
        self.PortComboBox.configure(takefocus="")

        self.RefreshPortButton = ttk.Button(
            self.PortFrame, command=self.refresh_ports)
        self.RefreshPortButton.place(
            relx=0.101, rely=0.42, height=26, width=73)
        self.RefreshPortButton.configure(takefocus="")
        self.RefreshPortButton.configure(text='''Refresh''')

        self.ConnectPortButton = ttk.Button(
            self.PortFrame, command=self.connect_port)
        self.ConnectPortButton.place(
            relx=0.505, rely=0.42, height=26, width=83)
        self.ConnectPortButton.configure(takefocus="")
        self.ConnectPortButton.configure(text='''Connect''')

        self.SettingsLabelFrame = ttk.Labelframe(top)
        self.SettingsLabelFrame.place(
            relx=0.324, rely=0.09, relheight=0.5, relwidth=0.635)
        self.SettingsLabelFrame.configure(relief='')
        self.SettingsLabelFrame.configure(text='''Settings''')

        self.IntervalLabel = ttk.Label(self.SettingsLabelFrame)
        self.IntervalLabel.place(
            relx=0.044, rely=0.268, height=34, width=139, bordermode='ignore')
        self.IntervalLabel.configure(background="#d9d9d9")
        self.IntervalLabel.configure(foreground="#000000")
        self.IntervalLabel.configure(font="TkDefaultFont")
        self.IntervalLabel.configure(relief="flat")
        self.IntervalLabel.configure(anchor='w')
        self.IntervalLabel.configure(justify='left')
        self.IntervalLabel.configure(text='''Sampling Interval''')

        self.SamplesLabel = ttk.Label(self.SettingsLabelFrame)
        self.SamplesLabel.place(relx=0.044, rely=0.487,
                                height=34, width=172, bordermode='ignore')
        self.SamplesLabel.configure(background="#d9d9d9")
        self.SamplesLabel.configure(foreground="#000000")
        self.SamplesLabel.configure(font="TkDefaultFont")
        self.SamplesLabel.configure(relief="flat")
        self.SamplesLabel.configure(anchor='w')
        self.SamplesLabel.configure(justify='left')
        self.SamplesLabel.configure(text='''Samples per Recording''')

        self.CycleLabel = ttk.Label(self.SettingsLabelFrame)
        self.CycleLabel.place(relx=0.044, rely=0.711,
                              height=35, width=117, bordermode='ignore')
        self.CycleLabel.configure(background="#d9d9d9")
        self.CycleLabel.configure(foreground="#000000")
        self.CycleLabel.configure(font="TkDefaultFont")
        self.CycleLabel.configure(relief="flat")
        self.CycleLabel.configure(anchor='w')
        self.CycleLabel.configure(justify='left')
        self.CycleLabel.configure(text='''Cycle Time''')

        self.IntervalComboBox = ttk.Combobox(
            self.SettingsLabelFrame, values=interval_vals)
        self.IntervalComboBox.place(
            relx=0.444, rely=0.263, relheight=0.11, relwidth=0.393, bordermode='ignore')
        self.IntervalComboBox.configure(
            textvariable=plotter_gui_support.interval_combobox)
        self.IntervalComboBox.configure(takefocus="")

        self.IntervalUnitsLabel = ttk.Label(self.SettingsLabelFrame)
        self.IntervalUnitsLabel.place(
            relx=0.867, rely=0.263, height=24, width=37, bordermode='ignore')
        self.IntervalUnitsLabel.configure(background="#d9d9d9")
        self.IntervalUnitsLabel.configure(foreground="#000000")
        self.IntervalUnitsLabel.configure(font="TkDefaultFont")
        self.IntervalUnitsLabel.configure(relief="flat")
        self.IntervalUnitsLabel.configure(anchor='w')
        self.IntervalUnitsLabel.configure(justify='left')
        self.IntervalUnitsLabel.configure(text='''s''')

        self.SamplesSpinBox = tk.Spinbox(
            self.SettingsLabelFrame, from_=1.0, to=1000.0)
        self.SamplesSpinBox.place(
            relx=0.444, rely=0.470, relheight=0.12, relwidth=0.387)
        self.SamplesSpinBox.configure(activebackground="#f9f9f9")
        self.SamplesSpinBox.configure(background="white")
        self.SamplesSpinBox.configure(font="TkDefaultFont")
        self.SamplesSpinBox.configure(highlightbackground="black")
        self.SamplesSpinBox.configure(selectbackground="blue")
        self.SamplesSpinBox.configure(selectforeground="white")
        self.SamplesSpinBox.configure(
            textvariable=plotter_gui_support.samples_spinbox)

        self.SamplesUnitsLabel = ttk.Label(self.SettingsLabelFrame)
        self.SamplesUnitsLabel.place(
            relx=0.85, rely=0.5, height=23, width=56, bordermode='ignore')
        self.SamplesUnitsLabel.configure(background="#d9d9d9")
        self.SamplesUnitsLabel.configure(foreground="#000000")
        self.SamplesUnitsLabel.configure(font="TkDefaultFont")
        self.SamplesUnitsLabel.configure(relief="flat")
        self.SamplesUnitsLabel.configure(anchor='w')
        self.SamplesUnitsLabel.configure(justify='left')
        self.SamplesUnitsLabel.configure(text='''samples''')

        self.NoHoursCycleSpinBox = tk.Spinbox(
            self.SettingsLabelFrame, from_=0.0, to=30.0)
        self.NoHoursCycleSpinBox.place(
            relx=0.467, rely=0.702, relheight=0.127, relwidth=0.098)
        self.NoHoursCycleSpinBox.configure(activebackground="#f9f9f9")
        self.NoHoursCycleSpinBox.configure(background="white")
        self.NoHoursCycleSpinBox.configure(font="TkDefaultFont")
        self.NoHoursCycleSpinBox.configure(highlightbackground="black")
        self.NoHoursCycleSpinBox.configure(selectbackground="blue")
        self.NoHoursCycleSpinBox.configure(selectforeground="white")
        self.NoHoursCycleSpinBox.configure(
            textvariable=plotter_gui_support.hours_spinbox)

        self.CycleHoursLabel = ttk.Label(self.SettingsLabelFrame)
        self.CycleHoursLabel.place(
            relx=0.578, rely=0.702, height=34, width=46, bordermode='ignore')
        self.CycleHoursLabel.configure(background="#d9d9d9")
        self.CycleHoursLabel.configure(foreground="#000000")
        self.CycleHoursLabel.configure(font="TkDefaultFont")
        self.CycleHoursLabel.configure(relief="flat")
        self.CycleHoursLabel.configure(anchor='w')
        self.CycleHoursLabel.configure(justify='left')
        self.CycleHoursLabel.configure(text='''Hours''')

        self.NoMinutesCycleSpinBox = tk.Spinbox(
            self.SettingsLabelFrame, from_=0.0, to=59.0)
        self.NoMinutesCycleSpinBox.place(
            relx=0.689, rely=0.702, relheight=0.127, relwidth=0.098)
        self.NoMinutesCycleSpinBox.configure(activebackground="#f9f9f9")
        self.NoMinutesCycleSpinBox.configure(background="white")
        self.NoMinutesCycleSpinBox.configure(font="TkDefaultFont")
        self.NoMinutesCycleSpinBox.configure(highlightbackground="black")
        self.NoMinutesCycleSpinBox.configure(selectbackground="blue")
        self.NoMinutesCycleSpinBox.configure(selectforeground="white")
        self.NoMinutesCycleSpinBox.configure(
            textvariable=plotter_gui_support.minutes_spinbox)

        self.CycleMinutesLabel = ttk.Label(self.SettingsLabelFrame)
        self.CycleMinutesLabel.place(
            relx=0.8, rely=0.702, height=34, width=55, bordermode='ignore')
        self.CycleMinutesLabel.configure(background="#d9d9d9")
        self.CycleMinutesLabel.configure(foreground="#000000")
        self.CycleMinutesLabel.configure(font="TkDefaultFont")
        self.CycleMinutesLabel.configure(relief="flat")
        self.CycleMinutesLabel.configure(anchor='w')
        self.CycleMinutesLabel.configure(justify='left')
        self.CycleMinutesLabel.configure(text='''Minutes''')

        self.OutputLabelFrame = ttk.Labelframe(top)
        self.OutputLabelFrame.place(
            relx=0.028, rely=0.601, relheight=0.167, relwidth=0.931)
        self.OutputLabelFrame.configure(relief='')
        self.OutputLabelFrame.configure(text='''Output''')

        self.OutputFileLabel = ttk.Label(self.OutputLabelFrame)
        self.OutputFileLabel.place(
            relx=0.044, rely=0.308, height=30, width=99, bordermode='ignore')
        self.OutputFileLabel.configure(background="#d9d9d9")
        self.OutputFileLabel.configure(foreground="#000000")
        self.OutputFileLabel.configure(font="TkDefaultFont")
        self.OutputFileLabel.configure(relief="flat")
        self.OutputFileLabel.configure(anchor='w')
        self.OutputFileLabel.configure(justify='left')
        self.OutputFileLabel.configure(text='''Output File''')

        self.OutFileText = ttk.Entry(self.OutputLabelFrame)
        self.OutFileText.place(
            relx=0.165, rely=0.35, relheight=0.338, relwidth=0.55, bordermode='ignore')
        self.OutFileText.configure(takefocus="")
        self.OutFileText.configure(cursor="xterm")
        self.OutFileText.configure(
            textvariable=plotter_gui_support.out_file_name)

        self.BrowseFileButton = ttk.Button(
            self.OutputLabelFrame, command=lambda: self.browse_path(top))
        self.BrowseFileButton.place(
            relx=0.730, rely=0.35, height=26, width=83, bordermode='ignore')
        self.BrowseFileButton.configure(takefocus="")
        self.BrowseFileButton.configure(text='''Browse''')

        self.OpenFileButton = ttk.Button(self.OutputLabelFrame, command=self.open_file)
        self.OpenFileButton.place(
            relx=0.860, rely=0.35, height=26, width=83, bordermode='ignore')
        self.OpenFileButton.configure(takefocus="")
        self.OpenFileButton.configure(text='''Open''')

        self.RecordDataButton = ttk.Button(top, command=lambda:self.start_recording(top))
        self.RecordDataButton.place(relx=0.335, rely=0.8, height=26, width=223)
        self.RecordDataButton.configure(takefocus="")
        self.RecordDataButton.configure(text='''Start Recording''')

        self.StatusLabel = ttk.Label(top)
        self.StatusLabel.place(relx=0.014, rely=0.899, height=37, width=687)
        self.StatusLabel.configure(background="#FF0000")
        self.StatusLabel.configure(foreground="#FFFFFF")
        self.StatusLabel.configure(
            font="-family {DejaVu Sans} -size 12 -weight bold -slant roman -underline 0 -overstrike 0")
        self.StatusLabel.configure(relief="flat")
        self.StatusLabel.configure(anchor='center')
        self.StatusLabel.configure(justify='left')
        self.StatusLabel.configure(text='''Disconnected''')
        self.StatusLabel.configure(compound='center')


    def get_ports(self):
        return serial_tools.comports()

    def refresh_ports(self):
        print("Refreshing ports...")
        self.PortComboBox['values'] = self.get_ports()

    def update_port_status(self):
        plotter_gui_support.port_open.set(plotter_gui_support.port.isOpen())
        print("Port status: ", str(plotter_gui_support.port.isOpen()))

        if (plotter_gui_support.port_open.get()):
            self.StatusLabel.configure(background="#00FA00")
            self.StatusLabel.configure(text='''Connected''')
            self.ConnectPortButton.configure(text='''Disconnect''')
            self.RefreshPortButton.configure(state='disabled')
            self.PortComboBox.configure(state='disabled')
        else:
            self.StatusLabel.configure(background="#FF0000")
            self.StatusLabel.configure(text='''Disconnected''')
            self.ConnectPortButton.configure(text='''Connect''')
            self.RefreshPortButton.configure(state='active')
            self.PortComboBox.configure(state='normal')

    def connect_port(self):
        if (self.PortComboBox.get() != ""):
            print("Port open stat:", plotter_gui_support.port_open.get())
            if (plotter_gui_support.port_open.get() == False):
                cb_str = self.PortComboBox.get()
                str_tokens = cb_str.split(" ")
                print("Serial port selected:", str_tokens[0])
                port_str = str_tokens[0]

                try:
                    plotter_gui_support.port = serial.Serial(port_str, 57600)
                    self.update_port_status()
                except serial.serialutil.SerialException as err:
                    messagebox.showerror("Port Error!", format(err))
                
            else:
                plotter_gui_support.port.close()
                self.update_port_status()
        else:
            messagebox.showerror("Error", "Select a serial port to continue")

    def update_UI(self):
        if (plotter_gui_support.recording_stat.get()):
            self.StatusLabel.configure(text='''Online''')
            self.StatusLabel.update()

            self.IntervalComboBox.configure(state='disabled')
            self.IntervalComboBox.update()
            self.SamplesSpinBox.configure(state='disabled')
            self.SamplesSpinBox.update()
            self.NoHoursCycleSpinBox.configure(state='disabled')
            self.NoHoursCycleSpinBox.update()
            self.NoMinutesCycleSpinBox.configure(state='disabled')
            self.NoMinutesCycleSpinBox.update()
            
            self.OutFileText.configure(state='disabled')
            self.OutFileText.update()
            self.BrowseFileButton.configure(state='disabled')
            self.BrowseFileButton.update()
            self.OpenFileButton.configure(state='disabled')
            self.OpenFileButton.update()

            self.RecordDataButton.configure(state='disabled')
            self.RecordDataButton.update()
        else:
            self.StatusLabel.configure(text='''Connected''')
            self.StatusLabel.update()

            self.IntervalComboBox.configure(state='normal')
            self.IntervalComboBox.update()
            self.SamplesSpinBox.configure(state='normal')
            self.SamplesSpinBox.update()
            self.NoHoursCycleSpinBox.configure(state='normal')
            self.NoHoursCycleSpinBox.update()
            self.NoMinutesCycleSpinBox.configure(state='normal')
            self.NoMinutesCycleSpinBox.update()
            
            self.OutFileText.configure(state='active')
            self.OutFileText.update()
            self.BrowseFileButton.configure(state='active')
            self.BrowseFileButton.update()
            self.OpenFileButton.configure(state='active')
            self.OpenFileButton.update()

            self.RecordDataButton.configure(state='active')
            self.RecordDataButton.update()
                

    def start_recording(self, plot_root):
        if (plotter_gui_support.recording_stat.get() == False):
            plotter_gui_support.recording_stat.set(True)
            if (plotter_gui_support.port_open.get()):
                self.update_UI()

                sample_interval = int(self.IntervalComboBox.get())
                no_samples = int(self.SamplesSpinBox.get())
                cycle_time_hours = int(self.NoHoursCycleSpinBox.get())
                cycle_time_minutes = int(self.NoMinutesCycleSpinBox.get())
                cycle_time_seconds = (cycle_time_hours * 3600) + \
                    (cycle_time_minutes * 60)
                print("Hours:", cycle_time_hours, ",minutes:",
                    cycle_time_minutes, ",seconds:", cycle_time_seconds)
                # plotter_gui_support.freq_plot = animate_plot.AnimatedPlot( plotter_gui_support.out_file_path.get(),
                #     plotter_gui_support.port, sample_interval, no_samples, cycle_time_seconds)
                # plotter_gui_support.freq_plot = None
                # print("After the freq plot", plotter_gui_support.freq_plot)
                tk_plot.create_FreqPlot(plot_root, path=plotter_gui_support.out_file_path.get(),
                    port=plotter_gui_support.port, s_interval=sample_interval,
                    samples=no_samples, cycle_time=cycle_time_seconds)

                plotter_gui_support.recording_stat.set(False)
                self.update_UI()
                self.update_port_status()
            else:
                messagebox.showerror("Port Not Connected!",
                                    "Choose a port and Click 'Connect' to continue")

    def browse_path(self, root):
        ftypes = [('CSV files', '*.csv'), ('All files', '*')]
        dlg = filedialog.Open(
            root, filetypes=ftypes, initialdir=plotter_gui_support.current_dir, initialfile=plotter_gui_support.out_file_name.get())
        f_dialog = dlg.show()
        print("Selected:", f_dialog)
        if (os.path.isfile(f_dialog)):
            plotter_gui_support.out_file_path = f_dialog
            [head, tail] = ntpath.split(f_dialog)
            plotter_gui_support.current_dir = head
            print("Dir path:", head)
            plotter_gui_support.out_file_name = tail
            print("File name:", tail)

    def open_file(self):
        if (sys.platform == "win32"):
            os.startfile(plotter_gui_support.out_file_path)
        else:
            opener ="open" if sys.platform == "darwin" else "xdg-open"
            subprocess.call([opener, plotter_gui_support.out_file_path.get()])

if __name__ == '__main__':
    vp_start_gui()
